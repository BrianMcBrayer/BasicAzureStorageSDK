<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#

// Exceptions for each error document on MSDN "Queue Service Error Codes"
// http://msdn.microsoft.com/en-us/library/windowsazure/dd179446.aspx
//
// To regenerate list below, copy from web page table and:
//		Replace: ([A-Za-z]+)[\r\n]+[A-Za-z ]+\((\d+)\)[\r\n]+([A-Za-z \d\-\.\,\/\(\)]+)[\r\n]+
//		With: { "\1", "\3" },\n

// we need both so we can try to failover to the second one on HEAD requests

var ErrorCodeList = new Dictionary<string,string>(){
	{ "MessageTooLarge", "The message exceeds the maximum allowed size." },
	{ "InvalidMarker", "The specified marker is invalid." },
	{ "PopReceiptMismatch", "The specified pop receipt did not match the pop receipt for a dequeued message." },
	{ "QueueNotFound", "The specified queue does not exist." },
	{ "MessageNotFound", "The specified message does not exist." },
	{ "QueueDisabled", "The specified queue has been disabled by the administrator." },
	{ "QueueAlreadyExists", "The specified queue already exists." },
	{ "QueueBeingDeleted", "The specified queue is being deleted." },
	{ "QueueNotEmpty", "The specified queue is not empty." }
};

#>
// -----------------------------------------------------------------------------
// Autogenerated code. Do not modify.
// -----------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Text;

namespace Basic.Azure.Storage.Communications.ServiceExceptions
{

/// <summary>
/// Maps a WebException from Azure to the appropriate local exception type
/// </summary>
/// <remarks>
/// Uses the Queue Service Error Codes defined here: http://msdn.microsoft.com/en-us/library/windowsazure/dd179446.aspx
/// </remarks>
public static class QueueServiceAzureExceptions
{

	public static AzureException GetExceptionFor(string requestId, HttpStatusCode statusCode, string errorCode, string statusDescription, Dictionary<string, string> details, WebException baseException)
	{
		switch(errorCode)
		{
		<#
		foreach(var errorCode in ErrorCodeList)
		{
			#> 
			case "<#=errorCode.Key#>":
				return new <#=errorCode.Key#>AzureException(requestId, statusCode, statusDescription, details, baseException);
			<#
		}
		#>
		}

		switch(statusDescription)
		{
			<#
			foreach(var errorCode in ErrorCodeList)
			{
				#> 
				case "<#=errorCode.Value#>":
					return new <#=errorCode.Key#>AzureException(requestId, statusCode, statusDescription, details, baseException);
				<#
			}
			#>

			default:
				return CommonServiceAzureExceptions.GetExceptionFor(requestId, statusCode, errorCode, statusDescription, details, baseException);
		}
	}

}

<#
foreach(var errorCode in ErrorCodeList)
{
	#>
	///
	///<summary>
	///Represents a '<#=errorCode.Key#>' error response from the Queue Service API 
	///</summary>
	///<remarks>Description: <#= errorCode.Value #></remarks>
	public class <#=errorCode.Key#>AzureException : AzureException
    {
        public <#=errorCode.Key#>AzureException(string requestId, HttpStatusCode statusCode, string statusDescription, Dictionary<string, string> details, WebException baseException)
            : base(requestId, statusCode, statusDescription, details, baseException) { }
    }

	<#
}
#>

}